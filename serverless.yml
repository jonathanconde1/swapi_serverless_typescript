service: swapi-api # Nombre del servicio

#frameworkVersion: '3' # Versión del framework Serverless que estamos usando

provider:
  name: aws # Proveedor en este caso es AWS
  runtime: nodejs18.x # El entorno de ejecución que usaremos (Node.js 18)
  region: us-east-1 # Región en la que desplegarás tu servicio
  stage: dev # La etapa del despliegue, normalmente dev, prod, etc.

  environment:
    DATABASE_URL: ${env:DATABASE_URL} # Variable de entorno para la URL de PostgreSQL
    SWAPI_BASE_URL: "https://swapi.py4e.com/api/people/" # URL de la API externa (SWAPI)
    TABLE_NAME: "personajes" # Nombre de la tabla en DynamoDB (si decides usar DynamoDB)

functions:
  createPersonaje:
    handler: src/infrastructure/serverless/handler.createPersonaje # Función para crear personajes
    events:
      - http:
          path: personajes
          method: post
          cors: true # Habilita CORS para este endpoint

  getPersonajes:
    handler: src/infrastructure/serverless/handler.getPersonajes # Función para obtener personajes
    events:
      - http:
          path: personajes
          method: get
          cors: true # Habilita CORS para este endpoint

  getAndStorePersonajeFromSWAPI:
    handler: src/infrastructure/serverless/handler.getPersonajeFromSWAPI
    events:
      - http:
          path: personajes/swapi/{id}
          method: get

resources:
  Resources:
    # Definición de la base de datos (si usas DynamoDB)
    # Aquí puedes agregar DynamoDB o configurar una base de datos relacional (RDS) si estás usando PostgreSQL
    # Para DynamoDB
    # DynamoDBTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${self:provider.environment.TABLE_NAME}
    #     AttributeDefinitions:
    #       - AttributeName: id
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5

    # Para RDS PostgreSQL (si decides usar Postgres)
    # Example: Define an RDS PostgreSQL instance in AWS
    # PostgreSQLInstance:
    #   Type: AWS::RDS::DBInstance
    #   Properties:
    #     DBInstanceClass: db.t2.micro
    #     Engine: postgres
    #     DBName: starwars
    #     MasterUsername: postgres
    #     MasterUserPassword: password
    #     AllocatedStorage: 20
    #     VPCSecurityGroups:
    #       - Ref: PostgreSQLSecurityGroup
    #     BackupRetentionPeriod: 7
    #     MultiAZ: false
    #     PubliclyAccessible: true
    #     DBInstanceIdentifier: postgres-instance

plugins:
  - serverless-offline # Para ejecutar localmente el servidor sin desplegar en AWS

# Si necesitas configurar variables de entorno adicionales, los secretos, o definir más configuraciones
custom:
  # Definir configuraciones específicas del entorno (si es necesario)
  # Puede ser útil si usas bases de datos, servicios externos o configuraciones adicionales
  stage: ${opt:stage, 'dev'}
